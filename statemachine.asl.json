{
  "Comment": "Cost Anomaly Detection Pipeline",
  "StartAt": "Preprocess",
  "States": {
    "Preprocess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-RUN-BATCH-JOB:$LATEST",
        "Payload": {
          "time.$": "$.time",
          "step": "PREPROCESS"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "ResourcePending"
          ],
          "IntervalSeconds": 300,
          "MaxAttempts": 12,
          "BackoffRate": 1
        }
      ],
      "Next": "Parallel",
      "Catch": [
        {
          "ErrorEquals": [
            "ResourceFailed"
          ],
          "Next": "Notify-Failure",
          "ResultPath": "$.serviceError"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.statesError",
          "Next": "Notify-Failure"
        }
      ]
    },
    "Notify-Failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-NOTIFY:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Notify-Success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-NOTIFY:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "ARIMA",
          "States": {
            "ARIMA": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-RUN-BATCH-JOB:$LATEST",
                "Payload": {
                  "time.$": "$.time",
                  "step": "MODEL-ARIMA"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ResourcePending"
                  ],
                  "IntervalSeconds": 600,
                  "MaxAttempts": 12,
                  "BackoffRate": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "ResourceFailed"
                  ],
                  "Next": "Notify-Failure-ARIMA",
                  "ResultPath": "$.serviceError"
                },
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "ResultPath": "$.statesError",
                  "Next": "Notify-Failure-ARIMA"
                }
              ],
              "End": true,
              "InputPath": "$.Payload"
            },
            "Notify-Failure-ARIMA": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-NOTIFY:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Fail (1)"
            },
            "Fail (1)": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "ETS",
          "States": {
            "ETS": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-RUN-BATCH-JOB:$LATEST",
                "Payload": {
                  "time.$": "$.time",
                  "step": "MODEL-ETS"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ResourcePending"
                  ],
                  "IntervalSeconds": 300,
                  "MaxAttempts": 12,
                  "BackoffRate": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "ResourceFailed"
                  ],
                  "Next": "Notify-Failure-ETS",
                  "ResultPath": "$.serviceError"
                },
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Notify-Failure-ETS",
                  "ResultPath": "$.statesError"
                }
              ],
              "End": true,
              "InputPath": "$.Payload"
            },
            "Notify-Failure-ETS": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-NOTIFY:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Fail (2)"
            },
            "Fail (2)": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "PCR",
          "States": {
            "PCR": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-RUN-BATCH-JOB:$LATEST",
                "Payload": {
                  "time.$": "$.time",
                  "step": "MODEL-PCR"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ResourcePending"
                  ],
                  "IntervalSeconds": 300,
                  "MaxAttempts": 12,
                  "BackoffRate": 1
                }
              ],
              "End": true,
              "Catch": [
                {
                  "ErrorEquals": [
                    "ResourceFailed"
                  ],
                  "ResultPath": "$.serviceError",
                  "Next": "Notify-Failure-PCR"
                },
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Notify-Failure-PCR",
                  "ResultPath": "$.statesError"
                }
              ],
              "InputPath": "$.Payload"
            },
            "Notify-Failure-PCR": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-NOTIFY:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Fail (3)"
            },
            "Fail (3)": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "PCA",
      "ResultSelector": {
        "ARIMA.$": "$[0].Payload",
        "ETS.$": "$[1].Payload",
        "PCR.$": "$[2].Payload"
      }
    },
    "PCA": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-northeast-2:000000000000:function:LAMBDA-COST-ANOMALY-RUN-BATCH-JOB:$LATEST",
        "Payload": {
          "time.$": "$.time",
          "step": "MODEL-PCA"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "ResourcePending"
          ],
          "IntervalSeconds": 300,
          "MaxAttempts": 12,
          "BackoffRate": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "ResourceFailed"
          ],
          "Next": "Notify-Failure",
          "ResultPath": "$.serviceError"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Notify-Failure",
          "ResultPath": "$.statesError"
        }
      ],
      "Next": "Notify-Success",
      "InputPath": "$.ARIMA"
    }
  }
}
